{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUBASHINI\\\\Desktop\\\\portfolio\\\\frontend\\\\src\\\\components\\\\Background\\\\ProfessionalParticles.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfessionalParticles = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let particlesArray = [];\n    const colors = ['#8CB9FF', '#A2A1FF', '#C6A4FF', '#FFC9F3'];\n\n    // Particle class - defining it BEFORE using it\n    class Particle {\n      constructor(x, y, size, color, weight) {\n        this.x = x;\n        this.y = y;\n        this.size = size;\n        this.color = color;\n        this.weight = weight;\n        this.directionX = Math.random() * 2 - 1;\n        this.directionY = Math.random() * 2 - 1;\n        this.initialX = x;\n        this.initialY = y;\n      }\n      draw() {\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fillStyle = this.color;\n        ctx.fill();\n      }\n      update() {\n        // Check for mouse proximity\n        if (mouse.x != null && mouse.y != null) {\n          let dx = mouse.x - this.x;\n          let dy = mouse.y - this.y;\n          let distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < mouse.radius) {\n            const forceDirectionX = dx / distance;\n            const forceDirectionY = dy / distance;\n            const force = (mouse.radius - distance) / mouse.radius;\n            const dirX = forceDirectionX * force * this.weight;\n            const dirY = forceDirectionY * force * this.weight;\n            this.x -= dirX;\n            this.y -= dirY;\n          } else {\n            // Return to original position\n            if (this.x !== this.initialX) {\n              let dx = this.initialX - this.x;\n              this.x += dx / 20;\n            }\n            if (this.y !== this.initialY) {\n              let dy = this.initialY - this.y;\n              this.y += dy / 20;\n            }\n          }\n        }\n\n        // Gentle flowing motion\n        this.x += this.directionX * 0.2;\n        this.y += this.directionY * 0.2;\n\n        // Boundary check and reverse direction\n        if (this.x > canvas.width || this.x < 0) {\n          this.directionX *= -1;\n        }\n        if (this.y > canvas.height || this.y < 0) {\n          this.directionY *= -1;\n        }\n        this.draw();\n      }\n    }\n\n    // Set canvas size\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      init(); // Now init is called after Particle class is defined\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    // Mouse interaction\n    let mouse = {\n      x: null,\n      y: null,\n      radius: 150\n    };\n    window.addEventListener('mousemove', event => {\n      mouse.x = event.x;\n      mouse.y = event.y;\n    });\n\n    // Initialize particles\n    function init() {\n      particlesArray = [];\n      const numberOfParticles = Math.min(Math.floor(canvas.width * canvas.height / 9000), 100);\n      for (let i = 0; i < numberOfParticles; i++) {\n        const size = Math.random() * 2 + 1;\n        const x = Math.random() * canvas.width;\n        const y = Math.random() * canvas.height;\n        const color = colors[Math.floor(Math.random() * colors.length)];\n        const weight = Math.random() * 2 + 0.1;\n        particlesArray.push(new Particle(x, y, size, color, weight));\n      }\n    }\n\n    // Connect close particles with lines\n    function connect() {\n      const maxDistance = 200;\n      for (let a = 0; a < particlesArray.length; a++) {\n        for (let b = a; b < particlesArray.length; b++) {\n          const dx = particlesArray[a].x - particlesArray[b].x;\n          const dy = particlesArray[a].y - particlesArray[b].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < maxDistance) {\n            const opacity = 1 - distance / maxDistance;\n            ctx.strokeStyle = `rgba(140, 185, 255, ${opacity * 0.5})`;\n            ctx.lineWidth = 0.5;\n            ctx.beginPath();\n            ctx.moveTo(particlesArray[a].x, particlesArray[a].y);\n            ctx.lineTo(particlesArray[b].x, particlesArray[b].y);\n            ctx.stroke();\n          }\n        }\n      }\n    }\n\n    // Animation loop\n    function animate() {\n      requestAnimationFrame(animate);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      particlesArray.forEach(particle => particle.update());\n      connect();\n    }\n    init();\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"absolute top-0 left-0 w-full h-full pointer-events-none opacity-70 z-0\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfessionalParticles, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ProfessionalParticles;\nexport default ProfessionalParticles;\nvar _c;\n$RefreshReg$(_c, \"ProfessionalParticles\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ProfessionalParticles","_s","canvasRef","canvas","current","ctx","getContext","particlesArray","colors","Particle","constructor","x","y","size","color","weight","directionX","Math","random","directionY","initialX","initialY","draw","beginPath","arc","PI","fillStyle","fill","update","mouse","dx","dy","distance","sqrt","radius","forceDirectionX","forceDirectionY","force","dirX","dirY","width","height","handleResize","window","innerWidth","innerHeight","init","addEventListener","event","numberOfParticles","min","floor","i","length","push","connect","maxDistance","a","b","opacity","strokeStyle","lineWidth","moveTo","lineTo","stroke","animate","requestAnimationFrame","clearRect","forEach","particle","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SUBASHINI/Desktop/portfolio/frontend/src/components/Background/ProfessionalParticles.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst ProfessionalParticles = () => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let particlesArray = [];\r\n    \r\n    const colors = ['#8CB9FF', '#A2A1FF', '#C6A4FF', '#FFC9F3'];\r\n    \r\n    // Particle class - defining it BEFORE using it\r\n    class Particle {\r\n      constructor(x, y, size, color, weight) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.size = size;\r\n        this.color = color;\r\n        this.weight = weight;\r\n        this.directionX = Math.random() * 2 - 1;\r\n        this.directionY = Math.random() * 2 - 1;\r\n        this.initialX = x;\r\n        this.initialY = y;\r\n      }\r\n      \r\n      draw() {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n        ctx.fillStyle = this.color;\r\n        ctx.fill();\r\n      }\r\n      \r\n      update() {\r\n        // Check for mouse proximity\r\n        if (mouse.x != null && mouse.y != null) {\r\n          let dx = mouse.x - this.x;\r\n          let dy = mouse.y - this.y;\r\n          let distance = Math.sqrt(dx * dx + dy * dy);\r\n          \r\n          if (distance < mouse.radius) {\r\n            const forceDirectionX = dx / distance;\r\n            const forceDirectionY = dy / distance;\r\n            const force = (mouse.radius - distance) / mouse.radius;\r\n            \r\n            const dirX = forceDirectionX * force * this.weight;\r\n            const dirY = forceDirectionY * force * this.weight;\r\n            \r\n            this.x -= dirX;\r\n            this.y -= dirY;\r\n          } else {\r\n            // Return to original position\r\n            if (this.x !== this.initialX) {\r\n              let dx = this.initialX - this.x;\r\n              this.x += dx / 20;\r\n            }\r\n            if (this.y !== this.initialY) {\r\n              let dy = this.initialY - this.y;\r\n              this.y += dy / 20;\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Gentle flowing motion\r\n        this.x += this.directionX * 0.2;\r\n        this.y += this.directionY * 0.2;\r\n        \r\n        // Boundary check and reverse direction\r\n        if (this.x > canvas.width || this.x < 0) {\r\n          this.directionX *= -1;\r\n        }\r\n        if (this.y > canvas.height || this.y < 0) {\r\n          this.directionY *= -1;\r\n        }\r\n        \r\n        this.draw();\r\n      }\r\n    }\r\n    \r\n    // Set canvas size\r\n    const handleResize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n      init(); // Now init is called after Particle class is defined\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n    \r\n    // Mouse interaction\r\n    let mouse = {\r\n      x: null,\r\n      y: null,\r\n      radius: 150\r\n    };\r\n    \r\n    window.addEventListener('mousemove', (event) => {\r\n      mouse.x = event.x;\r\n      mouse.y = event.y;\r\n    });\r\n    \r\n    // Initialize particles\r\n    function init() {\r\n      particlesArray = [];\r\n      const numberOfParticles = Math.min(Math.floor((canvas.width * canvas.height) / 9000), 100);\r\n      \r\n      for (let i = 0; i < numberOfParticles; i++) {\r\n        const size = Math.random() * 2 + 1;\r\n        const x = Math.random() * canvas.width;\r\n        const y = Math.random() * canvas.height;\r\n        const color = colors[Math.floor(Math.random() * colors.length)];\r\n        const weight = (Math.random() * 2) + 0.1;\r\n        \r\n        particlesArray.push(new Particle(x, y, size, color, weight));\r\n      }\r\n    }\r\n    \r\n    // Connect close particles with lines\r\n    function connect() {\r\n      const maxDistance = 200;\r\n      for (let a = 0; a < particlesArray.length; a++) {\r\n        for (let b = a; b < particlesArray.length; b++) {\r\n          const dx = particlesArray[a].x - particlesArray[b].x;\r\n          const dy = particlesArray[a].y - particlesArray[b].y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n          \r\n          if (distance < maxDistance) {\r\n            const opacity = 1 - (distance / maxDistance);\r\n            ctx.strokeStyle = `rgba(140, 185, 255, ${opacity * 0.5})`;\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.moveTo(particlesArray[a].x, particlesArray[a].y);\r\n            ctx.lineTo(particlesArray[b].x, particlesArray[b].y);\r\n            ctx.stroke();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Animation loop\r\n    function animate() {\r\n      requestAnimationFrame(animate);\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      particlesArray.forEach(particle => particle.update());\r\n      connect();\r\n    }\r\n    \r\n    init();\r\n    animate();\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      window.removeEventListener('mousemove', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas \r\n      ref={canvasRef} \r\n      className=\"absolute top-0 left-0 w-full h-full pointer-events-none opacity-70 z-0\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProfessionalParticles;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}